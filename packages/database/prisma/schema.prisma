// Prisma Schema for DeskOps
// Construction & Demolition Recycling Facility Management System

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================================================
// Core Configuration Models
// ============================================================================

model Site {
    id        String   @id @default(cuid())
    code      String   @unique
    name      String
    location  String?
    timezone  String   @default("UTC")
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productions        Production[]
    dispatches         Dispatch[]
    receivedMaterials  ReceivedMaterial[]
    equipmentLogs      EquipmentLog[]
    manpowerLogs       ManpowerLog[]
    inventorySnapshots InventorySnapshot[]
    exportJobs         ExportJob[]
    exportAudits       ExportAudit[]

    @@map("sites")
}

model Material {
    id        String   @id
    code      String   @unique
    type      String
    name      String
    category  String
    uom       String
    isFinal   Boolean
    notes     String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productions        Production[]
    dispatches         Dispatch[]
    receivedMaterials  ReceivedMaterial[]
    inventorySnapshots InventorySnapshot[]

    @@map("materials")
}

model Equipment {
    id        String   @id
    code      String   @unique
    name      String
    type      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    equipmentLogs EquipmentLog[]

    @@map("equipment")
}

model ManpowerRole {
    id        String   @id
    code      String   @unique
    name      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    manpowerLogs ManpowerLog[]

    @@map("manpower_roles")
}

// ============================================================================
// Operational Models
// ============================================================================

model Production {
    id         String   @id @default(cuid())
    siteId     String
    date       DateTime @db.Date
    shift      String?
    materialId String
    qtyTon     Decimal  @db.Decimal(12, 3)
    operation  String
    notes      String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String?

    site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
    material Material @relation(fields: [materialId], references: [id])

    @@unique([siteId, date, materialId, operation])
    @@map("production")
}

model Dispatch {
    id         String   @id @default(cuid())
    siteId     String
    date       DateTime @db.Date
    materialId String
    qtyTon     Decimal  @db.Decimal(12, 3)
    trips      Int?
    owner      String?
    reference  String?
    operation  String
    notes      String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String?

    site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
    material Material @relation(fields: [materialId], references: [id])

    @@map("dispatches")
}

model ReceivedMaterial {
    id         String   @id @default(cuid())
    siteId     String
    date       DateTime @db.Date
    materialId String
    qtyTon     Decimal  @db.Decimal(12, 3)
    source     String?
    vehicleRef String?
    notes      String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String?

    site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
    material Material @relation(fields: [materialId], references: [id])

    @@map("received_materials")
}

model EquipmentLog {
    id          String   @id @default(cuid())
    siteId      String
    date        DateTime @db.Date
    equipmentId String
    hours       Decimal  @db.Decimal(8, 2)
    count       Int      @default(0)
    shift       String?
    status      String?
    notes       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   String?

    site      Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
    equipment Equipment @relation(fields: [equipmentId], references: [id])

    @@unique([siteId, date, equipmentId, shift])
    @@map("equipment_logs")
}

model ManpowerLog {
    id        String   @id @default(cuid())
    siteId    String
    date      DateTime @db.Date
    roleId    String
    headcount Int
    hours     Decimal  @db.Decimal(8, 2)
    shift     String?
    notes     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String?

    site Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
    role ManpowerRole @relation(fields: [roleId], references: [id])

    @@unique([siteId, date, roleId, shift])
    @@map("manpower_logs")
}

model InventorySnapshot {
    id            String   @id @default(cuid())
    siteId        String
    date          DateTime @db.Date
    materialId    String
    openingTon    Decimal  @db.Decimal(12, 3)
    producedTon   Decimal  @db.Decimal(12, 3)
    receivedTon   Decimal  @db.Decimal(12, 3)
    dispatchedTon Decimal  @db.Decimal(12, 3)
    adjustmentTon Decimal  @default(0) @db.Decimal(12, 3)
    closingTon    Decimal  @db.Decimal(12, 3)
    isCalculated  Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    createdBy     String?

    site     Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
    material Material @relation(fields: [materialId], references: [id])

    @@unique([siteId, date, materialId])
    @@map("inventory_snapshots")
}

// ============================================================================
// Export & Audit Models
// ============================================================================

model ExportJob {
    id           String    @id @default(cuid())
    siteId       String
    userId       String
    module       String
    dateFrom     DateTime  @db.Date
    dateTo       DateTime  @db.Date
    granularity  String    @default("daily")
    format       String
    status       String    @default("pending")
    progress     Int       @default(0)
    filePath     String?
    fileSize     Int?
    fileHash     String?
    errorMessage String?
    downloadUrl  String?
    expiresAt    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    site        Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
    exportAudit ExportAudit?

    @@map("export_jobs")
}

model ExportAudit {
    id            String    @id @default(cuid())
    jobId         String    @unique
    siteId        String
    userId        String
    module        String
    filtersJson   String
    columnPreset  String?
    recordCount   Int
    fileSize      Int
    fileHash      String
    downloadCount Int       @default(0)
    lastDownload  DateTime?
    createdAt     DateTime  @default(now())

    site Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
    job  ExportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

    @@map("export_audits")
}
